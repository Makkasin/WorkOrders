
Функция СткПолучитьСоединение() Экспорт
	
	Стк = Новый Структура();
	
	Стк.Вставить("Сервер","azure1c.westeurope.cloudapp.azure.com");
	Стк.Вставить("Порт",80);
	Стк.Вставить("Логин","Serv");
	Стк.Вставить("Пароль","SERVgfhjkm");
	
	Возврат Стк;
	
КонецФункции

Функция ДанныеАПИ(Метод,УстановитьТело=Неопределено)
	
	//http://azure1c.westeurope.cloudapp.azure.com/hrmts/hs/ksAPI/GETFL
	
	СткСоединение = СткПолучитьСоединение();
	
	Соединение = Новый HTTPСоединение(
	СткСоединение.Сервер, // сервер (хост)
	СткСоединение.Порт, // порт, по умолчанию для http используется 80, для https 443
	СткСоединение.Логин, // пользователь для доступа к серверу (если он есть)
	СткСоединение.Пароль, // пароль для доступа к серверу (если он есть)
	, // здесь указывается прокси, если он есть
	, // таймаут в секундах, 0 или пусто - не устанавливать
	// защищенное соединение, если используется https
	);
	
	БазаЗУП = "hrmus";//СокрлП(РегистрыСведений.ксНастройкиСистемы.ПолучитьСвВоБазаЗУП());
	Если БазаЗУП = "" Тогда
		Сообщить("В настройках системы не задано название базы ЗУП!");
		Возврат Неопределено;
	КонецЕСЛИ;
	
	Запрос = Новый HTTPЗапрос("/"+БазаЗУП+"/hs/ksAPI/"+Метод);
	Запрос.Заголовки.Вставить("Content-Type","text/html; charset=utf-8");
	
	Если УстановитьТело=Неопределено Тогда
		УстановитьТело = Новый Структура("ИНН,КПП,идОрг","8603239869","860301001","");
	КонецЕСЛИ;
	Стр = XMLСтрока(Новый ХранилищеЗначения(УстановитьТело, Новый СжатиеДанных(6)));
	Запрос.УстановитьТелоИзСтроки(стр);
	
	Результат = Соединение.Записать(Запрос);
	
	Если Результат.КодСостояния <> 200 Тогда 
		Сообщить("Ошибка отправки: "+Результат.КодСостояния);
		Сообщить(результат.ПолучитьТелоКакСтроку());
		Возврат Неопределено;
	КонецЕСЛИ;  
	
	Тбл = XMLЗначение(Тип("ХранилищеЗначения"),результат.ПолучитьТелоКакСтроку()).Получить();
	//Если ТипЗнч(ТБл) <> Тип("ТаблицаЗначений") Тогда
	//	Сообщить("Неверый формат полученных данных!");
	//	Возврат Неопределено;
	//КонецеСЛИ;
	
	
	Возврат Тбл;
	
	
КонецФункции


Процедура Загрузить()                                      
	
	оТбл = ДанныеАПИ("GETFL");
	
	ТБлКА.Очистить();
	
	Для каждого оСтр из оТбл Цикл
		Стр = ТблКА.Добавить();
		ЗаполнитьЗначенияСвойств(Стр,остр);
		стр.ГУИД = остр.ссылкаГУИД;
		Гуид = Новый УникальныйИдентификатор(стр.ГУИД);
		сс = Справочники.ФизическиеЛица.ПолучитьСсылку(ГУИД);
		Если НАйти(СокрЛП(сс),"<Объект не найден") ТОгда
			Стр.Действие = "Новый"; 
		ИНАче
			Стр.Действие = "Обновить";
		КонецЕСЛИ;
		
		стр.индПоиск = нрег(Стр.наименование);
		
	КонецЦиклА;
	
	ТБлКА.Сортировать("Наименование"); 
	
	
				   
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Загрузить();
КонецПроцедуры


&НаКлиенте
Процедура Обновить(Команда)
	Загрузить();
КонецПроцедуры

&НасервереБезКонтекста
Функция ТблКАВыборНасервере(стр)
	
	Возврат Справочники.ФизическиеЛица.НовыйФЛ(стр);
	
КонецФункции

&НаСервере
Функция ПолучитьСткКолонок()
	
	Стк = новый Структура;
	пТ = тблКА.выгрузить(Новый Структура("Код","лфраол"));
	Для каждого Кол из пТ.Колонки Цикл
		Стк.Вставить(Кол.имя);
	КонецЦиклА;
	
	Возврат Стк;
	
КонецФункции

&НаКлиенте
Процедура ТблКАВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	                             
	СтандартнаяОБработка = Ложь;
	Стк = ПолучитьСткКолонок();
	ЗаполнитьЗначенияСвойств(Стк,Элементы.ТблКА.ДанныеСтроки(Выбраннаястрока));
	сс = ТблКАВыборНасервере(Стк);
	Если сс<>Неопределено Тогда
		Элементы.ТблКА.ДанныеСтроки(Выбраннаястрока).Действие = "Обновить";
		ОповеститьОбИзменении(сс);
	КонецЕСЛИ;
	
 КонецПроцедуры
 
&НаКлиенте
Процедура ФильтрСтрокаПриИзменении(Элемент)
	ФильтрСтрока = "";
КонецПроцедуры

&НаКлиенте
Процедура ФильтрСтрокаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	пДЛ = СтрДлина(Текст);
	пТекст = нрег(Текст);
	Если пДл=0 ТОгда Возврат; КонецЕсли;
	
	Для каждого Стр из ТблКА Цикл
		Если Лев(Стр.индПоиск,пДл) = пТекст Тогда
			Элементы.ТблКА.ТекущаяСтрока= стр.ПолучитьИдентификатор();
			прервать;
		КонецЕСлИ;
	КонецЦикла;
КонецПроцедуры

